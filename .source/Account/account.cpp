#include "../../includes/Account/account.h"

// TODO - @defgroup: Resources
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: Account(const string, const string)
Account::Account(const string newUsername, const string newPasskey) : username(newUsername), passkey(newPasskey), keys(0), bitchain() { return; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: ~Account(void)
Account::~Account(void) { return; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO - @defgroup: Functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: add(void)
void Account::add(void)
{
    //* @note: grab keyname, username, email, & password
    string keyname, username, email, password;
    do
    {
        cout << "Keyname: ";
        cin >> keyname;
    } while (!InputValidation(keyname));
    do
    {
        cout << "Username: ";
        cin >> username;
    } while (!InputValidation(username));
    do
    {
        cout << "Email: ";
        cin >> email;
    } while (!InputValidation(email));
    do
    {
        cout << "Password: ";
        HideTerminal();

        cin >> password;
        ShowTerminal();
    } while (!InputVerification(password));

    //* @note: pass user input into key object
    Key key(keyname, {username, password, email});

    if (bitchain.add(key))
    {
        keys++;
        cout << "'" << keyname << "' added" << endl;
    }
    else
        cout << "'" << keyname << "' failed to add" << endl;

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: remove(void)
void Account::remove(void)
{
    //* @note: grab target keyname to remove
    string target;
    do
    {
        cout << "Target: ";
        cin >> target;
    } while (!InputValidation(target));

    //* @note:
    if (bitchain.remove(target))
    {
        keys--;
        cout << "'" << target << "' removed" << endl;
    }
    else
        cout << "'" << target << "' removal failure" << endl;

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: search(void)
void Account::search(void)
{
    //* @note: grab search target
    string target;
    do
    {
        cout << "Target: ";
        cin >> target;
    } while (!InputValidation(target));

    //* @note: search bitchain for user' target
    if (bitchain.search(target))
        cout << "'" << target << "' found" << endl; //* target found
    else
        cout << "'" << target << "' not found" << endl; //! target not found

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: save(void)
bool Account::save(void) { return false; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: wipe(void)
bool Account::wipe(void) { return false; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: load(const string)
bool Account::load(void) { return false; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO - @defgroup: Mutators
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setUsername(const string) -- done
void Account::setUsername(const string nUsername)
{
    username = nUsername;
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setPasskey(const string) -- done
void Account::setPasskey(const string nPasskey)
{
    passkey = nPasskey;
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setKeys(const int) -- done
void Account::setKeys(const int nKeys)
{
    keys = nKeys;
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO - @defgroup: Accessors
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getUsername(void) -- done
const string Account::getUsername(void) { return username; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getPasskey(void) -- done
const string Account::getPasskey(void) { return passkey; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getKeys(void) -- done
int Account::getKeys(void) { return keys; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO - @defgroup: Overloads
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: operator<<(ostream&, const Account&)
ostream &operator<<(ostream &out, const Account &account)
{
    out << "|--------------------------------------------------|" << endl
        << "   Bitchain Account" << endl
        << "\t- Username:\t" << account.username << endl
        << "\t- Passkey:\t" << account.passkey << endl
        << "\t- Keys:\t\t" << account.keys << endl
        << "|--------------------------------------------------|";

    return out;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
