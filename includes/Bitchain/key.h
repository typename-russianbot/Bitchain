#pragma once
#include "../../includes/Master/Master.h"

//~ @struct: Data
struct Data
{
    //* @def: components
    string username; //* @var: username
    string password; //* @var:  password
    string email;    //* @var: email

    //* @defgroup: Overloads
    //////////////////////////////////////////////////////
    //* operator<<(ostream&, const Data&)
    friend ostream &operator<<(ostream &, const Data &);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* operator=(Data)
    Data &operator=(const Data &);
    //////////////////////////////////////////////////////
};

//& @class: Key
class Key
{
private:
    //* @def: components
    string name; //* @var: name
    Data data;   //* @var: data

public:
    //* @defgroup: Resources
    //////////////////////////////////////////////////////
    //* @public: Key(const string, const Data)
    //* @def: constructor

    Key(const string = "keyname", const Data = {"username", "password", "email"});
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: ~Key(void)
    //* @def: destructor

    ~Key(void);
    //////////////////////////////////////////////////////

    //* @defgroup: Functions:
    //////////////////////////////////////////////////////
    //* @public:
    //* @def:
    //////////////////////////////////////////////////////

    //* @defgroup: Mutators
    //////////////////////////////////////////////////////
    //* @public: setKeyname(const string)
    //* @def: sets keyname to string

    void setKeyname(const string);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: setUsername(const string)
    //* @def: sets username to string

    void setUsername(const string);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: setPassword(const string)
    //* @def: sets password to string

    void setPassword(const string);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: setEmail(const string)
    //* @def: sets email to string

    void setEmail(const string);
    //////////////////////////////////////////////////////

    //* @defgroup: Accessors
    //////////////////////////////////////////////////////
    //* @public: getKeyname(void)
    //* @def: returns keyname for this key

    const string getKeyname(void);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: getUsername(void)
    //* @def: returns username for this key

    const string getUsername(void);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: getPassword(void)
    //* @def: returns password for this key

    const string getPassword(void);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: getEmail(void)
    //* @def: returns email for this key

    const string getEmail(void);
    //////////////////////////////////////////////////////

    //* @defgroup: Overloads
    //////////////////////////////////////////////////////
    //* @public: operator=(const Key& key)
    //* @def: overloaded operator=

    Key &operator=(const Key &);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: operator<<(ostream&, const Key&)
    //* @def: overloaded ostream

    friend ostream &operator<<(ostream &, const Key &);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: operator>>
    //* @def: overloaded istream

    friend istream &operator>>(istream &, Key &);
    //////////////////////////////////////////////////////
};