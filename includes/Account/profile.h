#pragma once
#include "../Master/Master.h"

//& @class: Profile
class Profile
{
private:
    //? @defgroup: Components
    string username; //? @var: username
    string password; //? @var: password

public:
    //* @defgroup: Resources
    //////////////////////////////////////////////////////
    //* @public: Account()
    //* @def: constructor

    Profile(const string = "username", const string = "password");
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: ~Account(void)
    //* @def: destructor

    ~Profile(void);
    //////////////////////////////////////////////////////

    //* @defgroup: Mutators/Accessors
    //////////////////////////////////////////////////////
    //* @public: setUsername(const string)
    //* @def: sets profile username

    void setUsername(const string);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: setPassword(const string)
    //* @def: sets profile password

    void setPassword(const string);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: getUsername(void)
    //* @def: returns profile username

    const string getUsername(void);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: getPassword(void)
    //* @def: returns profile password

    const string getPassword(void);
    //////////////////////////////////////////////////////

    //* @defgroup: Helper Functions
    //////////////////////////////////////////////////////
    //* @public: save()
    //* @def: saves profile to 'profiles.txt'

    void save(void);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //* @public: remove()
    //* @def: removes profile from 'profiles.txt'

    void remove(void);
    //////////////////////////////////////////////////////

    //* @defgroup: Overloaded Functions
    //////////////////////////////////////////////////////
    //* @public: operator<<(ostream&, Profile&)
    //* @def: overloaded ostream function

    friend ostream &operator<<(ostream &, Profile &);
    //////////////////////////////////////////////////////
};