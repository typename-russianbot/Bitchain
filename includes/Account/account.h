#pragma once
#include "../Bitchain/bitchain.h"

//& @class: Account
class Account
{
private:
    //* Components
    string username;   //* @var: username
    string passkey;    //* @var: passkey
    int keys;          //* @var: keys
    Bitchain bitchain; //* @var: bitchain

protected:
    //? @defgroup: Functions
    //////////////////////////////////////////////////////////////////////////////////////////////
    //^ @protected: lookup(const string)
    //^ @def: searches for target username in accounts.txt & stores Account data if there's
    //^       a hit

    bool lookup(const string);
    //////////////////////////////////////////////////////////////////////////////////////////////

public:
    //? @defgroup: Resources
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: Account(const string, const string)
    //* @def: constructor

    Account(const string = "username", const string = "passkey");
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: ~Account(void)
    //* @def: destructor

    ~Account(void);
    //////////////////////////////////////////////////////////////////////////////////////////////

    // TODO - @defgroup: Functions
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: add
    //* @def: adds Bitchain Keys

    void add(void);        //* @fn: add(void)
    void add(const Key &); //* @fn: add(const Key&)
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: remove
    //* @def: removes Bitchain Keys

    void remove(void);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: search
    //* @def: searches for Bitchain Keys

    void search(void);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: print
    //* @def: prints Bitchain Keys

    void print(void);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: save
    //* @def: saves/caches Bitchain Account data

    bool save(void);  //* @fn: save(void)
    bool cache(void); //* @fn: cache(void)
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: wipe
    //* @def: wipes Bitchain Account

    bool wipe(void);         //* @fn: wipe(void)
    bool wipe(const string); //* @fn: wipe(const string)
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: load
    //* @def: loads Bitchain Account data

    bool load(void);         //* @fn: load(void)
    bool load(const string); //* @fn: load(const string)
    //////////////////////////////////////////////////////////////////////////////////////////////

    //? @defgroup: Mutators
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: setUsername(const string)
    //* @def: sets username

    void setUsername(const string);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: setPasskey(const string)
    //* @def: sets passkey

    void setPasskey(const string);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: setKeys(const int)
    //* @def: sets # of keys

    void setKeys(const int);
    //////////////////////////////////////////////////////////////////////////////////////////////

    //? @defgroup: Accessors
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: getUsername(void)
    //* @def: returns username

    const string getUsername(void);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: getPasskey(void)
    //* @def: returns passkey

    const string getPasskey(void);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: getKeys(void)
    //* @def: returns # of keys

    int getKeys(void);
    //////////////////////////////////////////////////////////////////////////////////////////////

    //? @defgroup: Overloads
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: operator<<(ostream&, const Account&)
    //* @def: prints username, password, & # of keys

    friend ostream &operator<<(ostream &, const Account &);
    //////////////////////////////////////////////////////////////////////////////////////////////
};