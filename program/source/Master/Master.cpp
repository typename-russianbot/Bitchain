#include "../../includes/Master/Master.h"

//& @def: Structures
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//& @struct: termios
struct termios TerminalVisible, TerminalHidden;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//? @def: Functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: HideTerminal(void)
void HideTerminal(void)
{
    tcgetattr(STDIN_FILENO, &TerminalVisible);

    TerminalHidden = TerminalVisible;
    TerminalHidden.c_lflag &= ~ECHO;

    tcsetattr(STDIN_FILENO, TCSANOW, &TerminalHidden);

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: ShowTerminal(void)
void ShowTerminal(void)
{
    tcsetattr(STDIN_FILENO, TCSANOW, &TerminalVisible);
    cout << endl;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: InputVerification(const string)
bool InputVerification(const string input)
{
    string verification;
    do
    {
        cout << "Re-enter Password: ";
        HideTerminal();

        cin >> verification;
        ShowTerminal();
    } while (!InputValidation(verification));

    if (input == verification)
        return true;

    return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: InputValidation(const string)
bool InputValidation(const string input)
{
    for (char character : input)
    {
        //! @note: Illegal Characters
        switch (character)
        {
        case ' ':
            return false;

        case '#':
            return false;

        case '%':
            return false;

        case ':':
            return false;

        case ';':
            return false;

        case '/':
            return false;

        case '\\':
            return false;

        case '<':
            return false;

        case '>':
            return false;

        case '"':
            return false;

        case '\'':
            return false;

        case '!':
            return false;

        default:
            break;
        }
        //! @endnote
    }

    return true;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: FileValidation(const ofstream&)
bool FileValidation(const ofstream &output)
{
    if (output)
        return true;

    return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: FileValidation(const ifstream&)
bool FileValidation(const ifstream &input)
{
    if (input)
        return true;

    return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: ConfirmOperation(void)
bool ConfirmOperation(void)
{
    //* @note: grab user confirmation
    char input;
    do
    {
        cout << "Confirm? [y/n]: ";
        cin >> input;
    } while (input != 'y' && input != 'Y' && input != 'n' && input != 'N');

    if (input == 'y' || input == 'Y')
        return true;
    else
        return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: CacheEmpty(void)
bool CacheEmpty(void)
{
    if (ifstream(".resources/Accounts/cache.txt").peek() == ifstream::traits_type::eof())
        return true;
    else
        return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: ClearCache(void)
bool ResetCache(void)
{
    try
    {
        filesystem::remove(".resources/Accounts/cache.txt");
        ofstream(".resources/Accounts/cache.txt").close();
        return true;
    }
    catch (const exception &)
    {
        return false;
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//^ @fn: CleanStart(void)
bool Restart(void)
{
    try
    {
        filesystem::remove(".resources/Accounts/*.txt");
        filesystem::remove(".resources/Bitchains/*.txt");
        ofstream(".resources/Accounts/accounts.txt").close();
        ofstream(".resources/Accounts/cache.txt").close();
        return true;
    }
    catch (const exception &)
    {
        return false;
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
