#pragma once
#include "../Bitchain/bitchain.h"

//& @class: Account
class Account
{
private:
    //* Components
    string username;   //* @var: username
    string passkey;    //* @var: passkey
    int keys;          //* @var: keys
    Bitchain bitchain; //* @var: bitchain

protected:
    //? @defgroup: Functions
    //////////////////////////////////////////////////////////////////////////////////////////////
    //^ @protected: lookup(const string)
    //^ @def: searches for target username in accounts.txt & stores Account data if there's
    //^       a hit

    bool lookup(const string);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //^ @protected: probe(void)
    //^ @def: stores currently saved data in cache

    bool probe(void);
    //////////////////////////////////////////////////////////////////////////////////////////////

public:
    //? @defgroup: Resources
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: Account(const string, const string)

    Account(const string = "username", const string = "passkey"); //* @def: default constructor
    Account(const Account &);                                     //* @def: copy constructor
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: ~Account(void)
    //* @def: destructor

    ~Account(void);
    //////////////////////////////////////////////////////////////////////////////////////////////

    // TODO - @defgroup: Functions
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: add

    void add(void);        //* @def: prompts & adds users' key data
    void add(const Key &); //* @def: adds key param to Bitchain
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: remove

    void remove(void);         //* @def: prompts & attempts removal of users' input
    void remove(const string); //* @def: attempts removal of target string
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: search

    void search(void);         //* @def: prompts & attempts search for users' input
    void search(const string); //* @def: attempts search for target string
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: print

    void print(void);         //* @def:
    void print(const string); //* @def:
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: save
    //* @def: writes account data to savefile

    bool save(void);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: wipe

    bool wipe(void);         //* @fn: wipe(void)
    bool wipe(const string); //* @fn: wipe(const string)
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: load

    bool load(void);         //* @def: prompts & attempts loading of users' input
    bool load(const string); //* @def: attempts to load account of target string
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: saveToCache(void)
    //* @def: caches account data

    bool saveToCache(void);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public loadFromCache(void)
    //* @def: prompts & attempts to load user inputted target

    bool loadFromCache(void);
    //////////////////////////////////////////////////////////////////////////////////////////////

    //? @defgroup: Mutators
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: setUsername(const string)
    //* @def: sets username

    void setUsername(const string);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: setPasskey(const string)
    //* @def: sets passkey

    void setPasskey(const string);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: setKeys(const int)
    //* @def: sets # of keys

    void setKeys(const int);
    //////////////////////////////////////////////////////////////////////////////////////////////

    //? @defgroup: Accessors
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: getUsername(void)
    //* @def: returns username

    const string getUsername(void);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: getPasskey(void)
    //* @def: returns passkey

    const string getPasskey(void);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: getKeys(void)
    //* @def: returns # of keys

    int getKeys(void);
    //////////////////////////////////////////////////////////////////////////////////////////////

    //? @defgroup: Overloads
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: operator<<(ostream&, const Account&)
    //* @def: prints username, password, & # of keys

    friend ostream &operator<<(ostream &, const Account &);
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //* @public: operator=(const Account&)
    //* @def:

    Account &operator=(const Account &);
    //////////////////////////////////////////////////////////////////////////////////////////////
};